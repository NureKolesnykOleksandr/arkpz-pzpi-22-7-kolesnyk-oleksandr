МIНIСТЕРСТВО ОСВIТИ І НАУКИ УКРАЇНИ

ХАРКIВСЬКИЙ НАЦІОНАЛЬНИЙ
УНIВЕРСИТЕТ РАДIОЕЛЕКТРОНIКИ




Кафедра «Програмна інженерія»




ЗВІТ
до практичного заняття №1 з дисципліни 
«Аналіз та рефакторинг коду» 
На тему: «Правила оформлення програмного коду»


Виконав: 						Прийняв:
ст. гр. ПЗПІ-22-7                       		ст. викладач кафедри ПІ
Колесник Олександр Андрійович		Сокорчук Ігор Петрович





Харкiв 2024

1 МЕТА 
Навчитися рефакторингу програмного коду, закріпити основні правила оформлення коду.


 2 ЗАВДАННЯ 
Обрати мову програмування для прикладів коду. Створити презентацію на тему «Правила оформлення програмного коду». 


3 ХІД РОБОТИ
Було обрано мову програмування PHP. У презентації (Додаток А) наведено основні рекомендації щодо оформлення програмного коду відповідно до стандартів PSR-1 та PSR-12 із прикладами поганого та гарного коду.
1. Рекомендація: Використовуйте зрозумілі імена змінних та дотримуйтесь стилю camelCase
Опис:
Імена змінних повинні бути англійською мовою, зрозумілими і відповідати контексту. Стиль camelCase полегшує читання і забезпечує єдність у проєкті.
// Поганий приклад
$ИмяПользователя = "John";  // Ім'я змінної російською
$validationdata = true;  // Відсутній camelCase

// Гарний приклад
$userName = "John";  // Імена змінних англійською
$validationData = true;  // Дотримано camelCase
2. Рекомендація: Дотримуйтеся правильного форматування відступів
Опис:
Відступи роблять код структурованим і легшим для сприйняття. Використовуйте чотири пробіли для вкладеності.
// Поганий приклад
if($x > 10){
echo "X більше 10";
}

// Гарний приклад
if ($x > 10) {
    echo "X більше 10";  // Використано чотири пробіли
}
3. Рекомендація: Скорочуйте вкладеність, якщо це можливо
Опис:
Глибока вкладеність ускладнює читання коду. Скорочення умов дозволяє краще сприймати логіку.
// Поганий приклад
if ($a > 0) {
    if ($b > 0) {
        if ($c > 0) {
            echo "Всі змінні більше нуля";
        }
    }
}

// Гарний приклад
if ($a > 0 && $b > 0 && $c > 0) {
    echo "Всі змінні більше нуля";  // Логіка спрощена
}
4. Рекомендація: Використовуйте чітке документування коду
Опис:
Коментарі та опис методів мають бути інформативними. Використовуйте стандартизовані формати документації.
// Поганий приклад
// Функція обробляє щось
function process() {
    // код функції
}

// Гарний приклад
/**
 * Обробляє вхідні дані та повертає результат
 *
 * @param int $input Вхідне значення
 * @return string
 */
function process($input) {
    // код функції
}
5. Рекомендація: Обмежуйте довжину рядків
Опис:
Довгі рядки ускладнюють читання. Розділяйте довгі рядки для збереження читабельності.
// Поганий приклад
$veryLongString = "Це дуже довгий рядок, який перевищує обмеження в 120 символів, і його важко читати та відслідковувати під час редагування.";

// Гарний приклад
$veryLongString = "Це дуже довгий рядок, який перевищує обмеження в 120 символів, " .
    "і його важко читати та відслідковувати під час редагування.";
6. Рекомендація: Дотримуйтеся стандартів іменування класів та методів
Опис:
Іменування класів має бути у форматі PascalCase, а методів – у camelCase.
// Поганий приклад
class userprofile {
    function getuserdata() {
        // код функції
    }
}

// Гарний приклад
class UserProfile {
    function getUserData() {
        // код функції
    }
}
7. Рекомендація: Форматуйте масиви правильно
Опис:
Чітке форматування масивів покращує читабельність та полегшує внесення змін.
// Поганий приклад
$array = array("ID" => 123, "Name" => "John", "Age" => 25);

// Гарний приклад
$array = array(
    'ID'    => 123,
    'Name'  => 'John',
    'Age'   => 25
);
Підсумок:
Ці приклади демонструють типові помилки форматування та правильне застосування стандартів PSR-1 і PSR-12, що сприяє кращій читабельності, підтримці та спільній роботі над кодом.




ВИСНОВКИ
Отже, у ході роботи було набуто навичок рефакторингу програмного коду, детально розглянуто основні правила оформлення коду.
Посилання на youtube:
https://www.youtube.com/watch?v=vcR8RVhYwhU
	 
ДОДАТОК А 
Презентація на тему «Правила оформлення програмного коду».
